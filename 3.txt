Ветки

git branch <branchName>
    для просмотра веток в текущей репозитории, если указан branchName команда создает ветку
    stx: git branch newBranch
    > -v --verbose
        флаг для команды используется для дополнительного просмотра названия самой ветки, хеш-коммита, и заголовок коммита
    > -d <branchName>
        флаг для удаления ветки, если она в верхнем индексе она удалеят без предупреждения
        stx: git branch -d|-D fix
    > --merged 
        флаг для просмотра списка слитых(объединенных) веток в текущую
        -- current branch: master
        stx: git branch --merged
    > --un-merged 
        флаг для просмотра списка не слитых(объединенных) веток в текущую
        -- current branch: master
        stx: git branch --merged
    > -u --set-upstream-to
        > git branch -u <remote server>/<branch>
        Если уже есть локальная ветка и нужно настроить ее на удаленную ветку, которую вы только получили, или хотите изменить upstream-ветку, которую вы отслеживаете, вы можете воспользоваться ключами -u или --set-upstream-to
        stx: git branch -u origin/master
    > -vv
        > git branch -vv
        Отобразится список ваших локальных веток с дополнительной информацией, включая то, какая из веток отслеживается, и если локальная ветка опережает, отстает или равняется относительно основной ветки.

git checkout [<branchName>|-- <file|catalog> ]
    для перехода на другую ветку (branchName)
    > -b --branch <branchName>
        при запуске команды с этим флагом и указав branchName, мы создаем ветку и переключаемся на нее
        stx: git checkout -b newBranch
    > -f --force <branchName>
        если есть какие-то изменения, то они сбрасываются (изменения текущей ветки) и переходится на другую ветку
        stx: git checkout -f otherBranch
        также если мы добавили изменения в индекс можно удалить из с помощью команды, так как если не указывать название ветки то ставится текущия по умолчанию
        stx: git checkout -f
    > git checkout -- index.html
        отменяем все изменения в файле index.html 
        !!!ВАЖНО: после выполнения этой команды изменения не вернуть

git reflog <branchName>
    для показа истории ветки, если она не указана то всю историю всех веток до текущей истории

git log [-p|--stat|--pretty=[short|oneline|full|fuller]|--[short|oneline|full|fuller][--decorate]]
    для показа истории ветки
    > git log -p [commitCount]
        флаг -p используется для показа разниц между коммитами 
        через commitCount можно ограничить число коммитов => git log -p -2
    > git log --stat
        для получения краткой статистики о коммитах
    > git log --pretty=short
        для форматирования вывода информации о коммитах
    > git log --oneline
    > git log --oneline --decorate
        для просмотра куда указывает HEAD в ветке


git gc 
    для запуска сборщика мусора

git checkout [HEAD|commitHash|branchName] <paths>
    paths указываются имена файлов которые сбросят все изменения (т.е. возьмет все из индекса), если есть и HEADS то начальные значения берутся из репозитория
    stx: 
        - git checkout index.html
        - git checkout -- master
        если имя папки похожа на ветку или коммит то нужно указать перед путем два дефиса
    > git checkout -b [branchName] [remote server]/[branchName]
        для добавления новой ветки в локальный репозиторий 
        отслеживающую ветку из удаленного репозитория
    > git checkout --track [remote server]/[branchName]
        

git stash 
    архивирует все изменения, также они достпуны в любой ветке. ВАЖНО!! Это команда не коммитит!

git stash pop
    возвращает все изменения из архива в любую ветку

git show [HEAD|@|commitHash|branchName]~ <paths>
    это команда показывает историю файлов, HEAD и @(собачка, краtкая запись HEAD) это текущий репозиторий, ~(тильда) означает сколько шагов назад нужно сделать
    stx: git show @~~~ === git show @~3
    если указать paths то просматривается история изменения лишь в этом файлем
    stx: git show @~2:index.html
    просмотр файла без изменений
    stx: git checkout @~2 index.html
    изменить файл на указанный момент, (точнее на два коммита назад)

git merge <branchName>
    команда для слияния веток, она создает заголовок ORIG_HEAD для удобного отката слияния
    -- current branch: master
    stx: git merge fix
    git branch -f master ORIG_HEAD -- для отката слияния
    > git merge origin/serverfix
        Чтобы слить наработки из удаленного репозитория
        в свою текущую рабочую ветку 

git rebase [--onto ] [<mainBranch> ] [ [mainBranch] [thematicBranch]]
    команда для перебазирования (т.е. берется снимок с mainBranch и объединяется поверх текущего)
    > git checkout experiment <!-- current branch master -->
      git rebase master
    > git rebase [mainBranch] [thematicBranch]
        можно объединить без предварительного перехода
        > git rebase master server_fix
    > git rebase --onto <mainBranch> <ignoreBranch> <thematicBranch>
        перебазируется тематическая ветка на основе главного и игнорирую ветку написанную по середине




